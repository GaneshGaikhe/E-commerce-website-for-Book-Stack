package com.bookstack.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.autopartshub.dto.BookAddRequest;
import com.autopartshub.model.Category;
import com.autopartshub.model.Book;
import com.autopartshub.service.BookService;
import com.autopartshub.utility.StorageService;
import com.bookstack.dao.BookDao;
import com.bookstack.dao.CategoryDao;

@RestController
@RequestMapping("api/book")
@CrossOrigin         //(origins = "http://localhost:3000")
public class BookController {
	
	@Autowired
	private BookService bookService;
	
	@Autowired
	private BookDao bookDao;
	
	@Autowired
	private CategoryDao categoryDao;
	
	@Autowired
	private StorageService storageService;
	
	
	@PostMapping("add")
	public ResponseEntity<?> addBook(BookAddRequest bookDto) {
		System.out.println("recieved request for ADD PRODUCT");
		System.out.println(bookDto);
		Book book=BookAddRequest.toEntity(bookDto);
		
		Optional<Category> optional = categoryDao.findById(bookDto.getCategoryId());
		Category category = null;
		if(optional.isPresent()) {
			category = optional.get();
		}
		
		book.setCategory(category);
		bookService.addBook(book, bookDto.getImage());
		
		System.out.println("response sent!!!");
		return ResponseEntity.ok(book);
		
	}
	@PutMapping("/update/{bookId}")
	public ResponseEntity<?> updateBookById(@PathVariable int bookId, @RequestBody BookAddRequest updatedBookDto) {
	    System.out.println("Received request for updating book with ID: " + bookId);
	    
	    Optional<Book> optionalBook = bookDao.findById(bookId);
	    if (optionalBook.isPresent()) {
	        Book book = optionalBook.get();
	        
	        book.setTitle(updatedBookDto.getTitle());
	        book.setDescription(updatedBookDto.getDescription());
	        book.setPrice(updatedBookDto.getPrice());
	        book.setQuantity(updatedBookDto.getQuantity());
	        
	        Optional<Category> optionalCategory = categoryDao.findById(updatedBookDto.getCategoryId());
	        if (optionalCategory.isPresent()) {
	            Category category = optionalCategory.get();
	            book.setCategory(category);
	        }
	        
	        bookService.updateBook(book, updatedBookDto.getImage());
	        System.out.println("Book with ID " + bookId + " has been updated successfully.");
	        return ResponseEntity.ok(book);
	    } else {
	        System.out.println("Book with ID " + bookId + " does not exist.");
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book with ID " + bookId + " does not exist.");
	    }
	}

	
	@GetMapping("all")
	public ResponseEntity<?> getAllBooks() {
		
		System.out.println("request came for getting all books");
		
		List<Book> books = new ArrayList<Book>();
		
		books = bookDao.findAll();
		
		System.out.println("response sent!!!");
		
		return ResponseEntity.ok(books);
		
	}
	
	@GetMapping("id")
	public ResponseEntity<?> getBookById(@RequestParam("bookId") int bookId) {
		
		System.out.println("request came for getting Book by Book Id");
		
		Book book = new Book();
		
		Optional<Book> optional = bookDao.findById(bookId);
		
		if(optional.isPresent()) {
			book = optional.get();
		}
		System.out.println("response sent!!!");
		
		return ResponseEntity.ok(book);
		
	}
	
	@GetMapping("/category")
	public ResponseEntity<?> getBooksByCategories(@RequestParam("categoryId") int categoryId) {
		
		System.out.println("request came for getting all books by category");
		
		List<Book> books = new ArrayList<Book>();
		
		books = bookDao.findByCategoryId(categoryId);
		
		System.out.println("response sent!!!");
		
		return ResponseEntity.ok(books);
		
	}
	
	@DeleteMapping("/delete/{bookId}")
	public ResponseEntity<?> deleteBookById(@PathVariable int bookId) {
	    System.out.println("Received request for deleting book with ID: " + bookId);
	    
	    Optional<Book> optionalBook = bookDao.findById(bookId);
	    if (optionalBook.isPresent()) {
	        Book book = optionalBook.get();
	        bookService.deleteBook(book);
	        System.out.println("Book with ID " + bookId + " has been deleted successfully.");
	        return ResponseEntity.ok("Book with ID " + bookId + " has been deleted successfully.");
	    } else {
	        System.out.println("Book with ID " + bookId + " does not exist.");
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book with ID " + bookId + " does not exist.");
	    }
	}


	
	@GetMapping(value="/{bookImageName}", produces = "image/*")
	public void fetchBookImage(@PathVariable("bookImageName") String bookImageName, HttpServletResponse resp) {
		System.out.println("request came for fetching book pic");
		System.out.println("Loading file: " + bookImageName);
		Resource resource = storageService.load(bookImageName);
		if(resource != null) {
			try(InputStream in = resource.getInputStream()) {
				ServletOutputStream out = resp.getOutputStream();
				FileCopyUtils.copy(in, out);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		System.out.println("response sent!");
	}

}
